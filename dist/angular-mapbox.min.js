angular.module("angularMapbox",[]),angular.module("angularMapbox").directive("backButton",function(){return{restrict:"E",require:"^mapbox",scope:!0,template:'<a class="back md-fab md-primary md-default-theme md-cyan-theme md-button"ng-click="back()" ng-show="show"><i class="fa fa-times"></i></a><a class="back md-fab md-primary md-default-theme md-cyan-theme md-button"ng-click="zoomIn()" ng-show="show"><i class="fa fa-plus"></i></a><a class="back md-fab md-primary md-default-theme md-cyan-theme md-button"ng-click="zoomOut()" ng-show="show"><i class="fa fa-minus"></i></a>',controller:["$scope",function($scope){var parent=$scope.$parent.$parent;$scope.show=!1,$scope.zoomMin=0,parent.getMap().then(function(map){$scope.zoomMin=Math.round(map.getZoom()),console.log("zoom min init",$scope.zoomMin)}),parent.$watch("showBack",function(){$scope.show=parent.showBack}),$scope.zoomIn=function(){parent.getMap().then(function(map){var z=Math.round(map.getZoom());map.setZoom(z+1),map.dragging.enable()})},$scope.zoomOut=function(){parent.getMap().then(function(map){var z=Math.round(map.getZoom());z-1>6&&map.setZoom(z-1)})},$scope.back=function(){parent.showBack=!1,parent.getMap().then(function(map){var region=parent.featureLayers[0];map.dragging.disable(),parent.featureLayers.forEach(function(layer,index){index>0&&layer.clearLayers()}),parent.$parent.hasOwnProperty("region")&&(parent.$parent.region=null),parent.$parent.hasOwnProperty("regionData")&&(parent.$parent.regionData={}),map.fitBounds(region.getBounds())})},this.$scope=$scope}]}}),angular.module("angularMapbox").directive("featureLayer",["$mdToast","$http","questionRegion",function($mdToast,$http,questionRegion){return{restrict:"E",transclude:!0,require:"^mapbox",scope:!0,link:function(scope,element,attrs,controller){attrs.data?controller.getMap().then(function(map){var geojsonObject=scope.$eval(attrs.data),featureLayer=L.mapbox.featureLayer(geojsonObject).addTo(map);controller.$scope.featureLayers.push(featureLayer)}):attrs.url?scope.$watch("radio",function(){controller.getMap().then(function(map){var featureLayer=L.mapbox.featureLayer().addTo(map);featureLayer.loadURL(attrs.url),featureLayer.on("ready",function(){map.fitBounds(featureLayer.getBounds())}),controller.$scope.featureLayers.push(featureLayer)})}):attrs.hasOwnProperty("radio")?scope.$watch("radio",function(){controller.getMap().then(function(map){var featureLayer=L.mapbox.featureLayer().addTo(map);featureLayer.loadURL("/coverages/"+scope.radio.slug+".geojson"),featureLayer.on("ready",function(){map.fitBounds(featureLayer.getBounds())}),controller.$scope.featureLayers.push(featureLayer)})}):attrs.scope?scope.$watch(attrs.scope,function(geojson){controller.getMap().then(function(map){controller.$scope.hasOwnProperty("geojsonLayer")?controller.$scope.geojsonLayer.addData(geojson):(controller.$scope.geojsonLayer=L.geoJson(geojson),controller.$scope.geojsonLayer.addTo(map)),controller.$scope.geojsonLayer.setStyle({color:"#ff7800",weight:5,opacity:.2}),map.fitBounds(controller.$scope.geojsonLayer.getBounds())})}):scope.geojson&&scope.$watch("geojson",function(){return scope.geojson&&0!==scope.geojson.length?void controller.getMap().then(function(map){var featureLayer={};controller.$scope.featureLayers.length>0?(featureLayer=controller.$scope.featureLayers[0],featureLayer.setGeoJSON(scope.geojson)):(featureLayer=L.mapbox.featureLayer(scope.geojson),featureLayer.addTo(map),featureLayer.getBounds().hasOwnProperty("_northEast")&&map.fitBounds(featureLayer.getBounds()),controller.$scope.featureLayers.push(featureLayer),featureListener(featureLayer,map,controller.$scope,$mdToast,$http,questionRegion))}):!1})}}}]);var regionDistricts=null,featureListener=function(featureLayer,map,scope,$mdToast,$http,questionRegion){featureLayer.on({mouseover:function(e){if("undefined"==typeof e.layer.feature)return!1;var feature=e.layer.feature;questionRegion.getHTML(feature.properties.urlRegion,function(err,popupContent){e.layer.bindPopup(popupContent,{closeButton:!1,minWidth:320}),e.layer.openPopup()})},click:function(e){if(e.layer.closePopup(),"undefined"==typeof e.layer.feature)return!1;var url=e.layer.feature.properties.url,region=L.mapbox.featureLayer(e.layer.feature),mask=e.layer.feature;mask.geometry.coordinates=[[[-180,-90],[-180,90],[180,90],[180,-90],[-180,-90]],mask.geometry.coordinates[0]];var maskLayer=L.geoJson(mask,{fillOpacity:.7,fillColor:"#fff",weight:0}).addTo(map);return regionDistricts&&regionDistricts.clearLayers(),$http.get(url).success(function(data){regionDistricts=L.mapbox.featureLayer(data.geojson),regionDistricts.addTo(map),map.fitBounds(region.getBounds()),scope.$parent.hasOwnProperty("region")&&scope.$parent.$apply(function(){scope.$parent.region=e.layer.feature.properties.id}),scope.$parent.hasOwnProperty("regionData")&&(scope.$parent.regionData=data),scope.featureLayers.push(maskLayer),scope.featureLayers.push(regionDistricts),scope.showBack=!0}).error(function(){console.log("http error")}),!1}})};angular.module("angularMapbox").directive("legend",function(){return{restrict:"E",require:"^mapbox",scope:!0,link:function(scope,element,attrs,controller){scope.$watch("legend",function(){controller.getMap().then(function(map){"undefined"!=typeof scope.legend&&map.legendControl.addLegend(getLegendHTML(scope.legend))})})}}});var getLegendHTML=function(responses){return labels=[],responses.forEach(function(response){labels.push('<li><span class="swatch" style="background:'+response.color+'"></span> '+response.content+"</li>")}),"<span>Legend</span><ul>"+labels.join("")+"</ul>"};angular.module("angularMapbox").directive("mapbox",["$compile","$q",function($compile,$q){var _mapboxMap;return{restrict:"E",transclude:!0,scope:!0,replace:!0,link:function(scope,element,attrs){var zoomControl=!0;attrs.hasOwnProperty("zoomControl")&&(zoomControl="true"===attrs.zoomControl),scope.map=L.mapbox.map(element[0],attrs.mapId,{zoomControl:zoomControl}),_mapboxMap.resolve(scope.map);var mapWidth=attrs.width||500,mapHeight=attrs.height||500;element.css("width",mapWidth+"px"),element.css("height",mapHeight+"px");var zoom=attrs.zoom||12;attrs.lat&&attrs.lng&&scope.map.setView([attrs.lat,attrs.lng],zoom),scope.isClusteringMarkers=void 0!==attrs.clusterMarkers;var shouldRefitMap=void 0!==attrs.scaleToFit;scope.fitMapToMarkers=function(){if(shouldRefitMap){var group=new L.featureGroup(scope.markers);scope.map.fitBounds(group.getBounds())}},attrs.onReposition&&scope.map.on("dragend",function(){scope[attrs.onReposition](scope.map.getBounds())}),attrs.onZoom&&scope.map.on("zoomend",function(){scope[attrs.onZoom](scope.map.getBounds())}),zoomControl||(scope.map.dragging.disable(),scope.map.touchZoom.disable(),scope.map.doubleClickZoom.disable(),scope.map.scrollWheelZoom.disable(),scope.map.tap&&scope.map.tap.disable()),scope.$on("$destroy",function(){scope.map.remove()})},template:'<div class="angular-mapbox-map" ng-transclude></div>',controller:["$scope",function($scope){$scope.markers=[],$scope.featureLayers=[],$scope.showBack=!1,_mapboxMap=$q.defer(),$scope.getMap=this.getMap=function(){return _mapboxMap.promise},L.MarkerClusterGroup&&($scope.clusterGroup=new L.MarkerClusterGroup,this.getMap().then(function(map){map.addLayer($scope.clusterGroup)})),this.$scope=$scope}]}}]),angular.module("angularMapbox").directive("marker",["$compile",function($compile){var _colors={navy:"#001f3f",blue:"#0074d9",aqua:"#7fdbff",teal:"#39cccc",olive:"#3d9970",green:"#2ecc40",lime:"#01ff70",yellow:"#ffdc00",orange:"#ff851b",red:"#ff4136",fuchsia:"#f012be",purple:"#b10dc9",maroon:"#85144b",white:"white",silver:"#dddddd",gray:"#aaaaaa",black:"#111111"};return{restrict:"E",require:"^mapbox",transclude:!0,scope:!0,link:function(scope,element,attrs,controller,transclude){function setStyleOptions(attrs,default_opts){var opts=default_opts||{};return attrs.size&&(opts["marker-size"]=attrs.size),attrs.color&&(opts["marker-color"]="#"===attrs.color[0]?attrs.color:_colors[attrs.color]||attrs.color),attrs.icon&&(opts["marker-symbol"]=attrs.icon),opts}var marker,opts={draggable:void 0!==attrs.draggable},style=setStyleOptions(attrs),addMarker=function(map,latlng,popupContent,opts,style){opts=opts||{};var marker=L.mapbox.marker.style({properties:style},latlng);return popupContent&&popupContent.length>0&&marker.bindPopup(popupContent),controller.$scope.isClusteringMarkers&&opts.excludeFromClustering!==!0?controller.$scope.clusterGroup.addLayer(marker):marker.addTo(map),opts.draggable&&marker.dragging.enable(),controller.$scope.markers.push(marker),controller.$scope.fitMapToMarkers(),marker},addCurrentLocation=function(map,popupContent,opts,style){style=setStyleOptions(style,{"marker-color":"#000","marker-symbol":"star"}),opts.excludeFromClustering=!0,map.on("locationfound",function(e){marker=addMarker(map,[e.latlng.lat,e.latlng.lng],null,opts,style)}),map.locate()};controller.getMap().then(function(map){map.on("popupopen",function(){var popup=angular.element(document.getElementsByClassName("leaflet-popup-content"));$compile(popup)(scope),scope.$$phase||scope.$digest()}),setTimeout(function(){for(var popupHTML="",transcluded=transclude(scope,function(){}),i=0;i<transcluded.length;i++)void 0!==transcluded[i].outerHTML&&(popupHTML+=transcluded[i].outerHTML);if(void 0!==attrs.currentLocation)addCurrentLocation(map,null,opts,style);else{if(popupHTML){var popup=angular.element(popupHTML);$compile(popup)(scope),scope.$$phase||scope.$digest();var newPopupHTML="";for(i=0;i<popup.length;i++)newPopupHTML+=popup[i].outerHTML;marker=addMarker(map,[attrs.lat,attrs.lng],newPopupHTML,opts,style)}else marker=addMarker(map,[attrs.lat,attrs.lng],null,opts,style);element.bind("$destroy",function(){controller.$scope.isClusteringMarkers?controller.$scope.clusterGroup.removeLayer(marker):map.removeLayer(marker)})}},0)})}}}]);